{"version":3,"sources":["components/pictures.js","components/videos.js","components/navBar.js","components/infoCard.js","App.js","serviceWorker.js","index.js"],"names":["Pictures","media","class","classs","title","date","src","url","explanation","Videos","controls","Navbar","props","href","Infocard","alt","target","role","aria-pressed","App","state","fetch","then","res","json","data","setState","catch","console","log","conRend","this","media_type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6MAwBeA,EAlBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEpB,OACA,6BACM,yBAAKC,MAAM,iBACT,yBAAKA,MAAM,aACT,wBAAIC,OAAO,cAAX,oBAA0CF,EAAMG,OAChD,wBAAIF,MAAM,iCAAiCD,EAAMI,MACjD,yBAAKH,MAAM,oCAAoCI,IAAKL,EAAMM,MAC1D,6BACE,uBAAGL,MAAM,0BAA0BD,EAAMO,kBCYtCC,EAtBA,SAAC,GAAe,IAAbR,EAAY,EAAZA,MAElB,OACA,6BAEM,yBAAKC,MAAM,sBACT,yBAAKA,MAAM,aACT,wBAAIC,OAAO,cAAX,kBAAwCF,EAAMG,OAC9C,wBAAIF,MAAM,iCAAiCD,EAAMI,MACjD,yBAAKH,MAAM,2DACT,4BAAQA,MAAM,wBAAwBI,IAAKL,EAAMM,IAAKG,UAAQ,KAEhE,6BACE,uBAAGR,MAAM,0BAA0BD,EAAMO,kBCPtCG,EAVA,SAAEC,GAEjB,OAEE,yBAAKV,MAAM,qCACT,uBAAGA,MAAM,eAAeW,KAAK,KAAI,0CAAmB,wBAAIX,MAAO,aAAX,mCCezCY,EAnBE,SAACF,GAEhB,OACI,yBAAKV,MAAM,iBACX,yBAAKA,MAAM,aACT,wBAAIC,OAAO,cAAX,eACA,wBAAID,MAAM,iCAAV,yBACA,yBAAKA,MAAM,oCAAoCI,IAAK,qFAAsFS,IAAK,cAC/I,6BACE,uBAAGb,MAAM,0BAAT,mLACA,ioBACA,qHAEA,uBAAGW,KAAK,yDAA0DG,OAAO,SAASd,MAAM,4CAA4Ce,KAAK,SAASC,eAAa,QAA/J,wBCuCKC,E,kDA/CX,WAAYP,GAAQ,IAAD,8BACnB,cAAMA,IACDQ,MAAQ,CACTnB,MAAO,IAHQ,E,gEAOD,IAAD,OAIjBoB,MAHY,wFAIXC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,SAAS,CAAEzB,MAAOwB,OAExBE,MAAMC,QAAQC,O,+BAIf,IAAIC,EAWJ,MAVkC,SAA/BC,KAAKX,MAAMnB,MAAM+B,aAElBF,EAAU,kBAAC,EAAD,CAAQ7B,MAAO8B,KAAKX,MAAMnB,SAGJ,SAA/B8B,KAAKX,MAAMnB,MAAM+B,aAElBF,EAAU,kBAAC,EAAD,CAAU7B,MAAO8B,KAAKX,MAAMnB,SAItC,6BACC,kBAAC,EAAD,MACD,yBAAKC,MAAM,OACT,yBAAKA,MAAM,eACR4B,GAEH,yBAAK5B,MAAM,eACR,kBAAC,EAAD,a,GAxCO+B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.ac587984.chunk.js","sourcesContent":["// src/components/objects.js\nimport React from 'react'\n\n// objects is the parameter passed to a fubction called Objects (defined by const).\n// What the function does is everything after the fat arrow\n\nconst Pictures = ({ media }) => {\n//  console.log({objects.near_earth_objects[1]});\nreturn (\n<div>\n      <div class=\"card bg-light\">\n        <div class=\"card-body\">\n          <h5 classs=\"card-title\">Today's Picture: {media.title}</h5>\n          <h6 class=\"card-subtitle mb-2 text-muted\">{media.date}</h6>\n          <img class=\"img-fluid rounded mx-auto d-block\" src={media.url} />\n          <div>\n            <p class=\"card-text mx-auto mt-3\">{media.explanation}</p>\n          </div>\n        </div>\n      </div>\n  </div>\n  )\n};\n\nexport default Pictures\n","// src/components/objects.js\nimport React from 'react'\n\n// objects is the parameter passed to a fubction called Objects (defined by const).\n// What the function does is everything after the fat arrow\n\nconst Videos = ({ media }) => {\n//  console.log({objects.near_earth_objects[1]});\nreturn (\n<div>\n  {\n      <div class=\"card bg-light mx-3\">\n        <div class=\"card-body\">\n          <h5 classs=\"card-title\">Today's Video: {media.title}</h5>\n          <h6 class=\"card-subtitle mb-2 text-muted\">{media.date}</h6>\n          <div class=\"embed-responsive embed-responsive-16by9 mx-auto d-block\">\n            <iframe class=\"embed-responsive-item\" src={media.url} controls/>\n          </div>\n          <div>\n            <p class=\"card-text mx-auto mt-3\">{media.explanation}</p>\n          </div>\n      </div>\n    </div>\n  }\n</div>\n  )\n};\n\nexport default Videos\n","import React from 'react'\n\nconst Navbar = ( props ) => {\n\nreturn (\n\n  <nav class=\"navbar mb-4 navbar-light bg-light\">\n    <a class=\"navbar-brand\" href=\"#\"><h3>NASA:_APoD</h3><h5 class =\"text-wrap\">Astronomy Picture of the Day</h5></a>\n  </nav>\n  )\n};\n\nexport default Navbar\n//  <center><h1>NASA:  Picture of the Day</h1></center>\n","import React from 'react'\n\n// functional component\nconst Infocard = (props) =>{\n\n  return(\n      <div class=\"card bg-light\">\n      <div class=\"card-body\">\n        <h5 classs=\"card-title\">Information</h5>\n        <h6 class=\"card-subtitle mb-2 text-muted\">What is this website?</h6>\n        <img class=\"img-fluid rounded mx-auto d-block\" src= \"https://helix.northwestern.edu/sites/helix/files/field/image/nasa-logo-web-rgb.png\"  alt =\"Nasa Logo\"/>\n        <div>\n          <p class=\"card-text mx-auto mt-3\">This app is built with React and Bootstrap  and uses Nasa's Astronomy picture of the day API. Everyday a new image or video is shared. Nasa have this to say about the service:</p>\n          <p>\"One of the most popular websites at NASA is the Astronomy Picture of the Day. In fact, this website is one of the most popular websites across all federal agencies. It has the popular appeal of a Justin Bieber video. This endpoint structures the APOD imagery and associated metadata so that it can be repurposed for other applications. In addition, if the concept_tags parameter is set to True, then keywords derived from the image explanation are returned. These keywords could be used as auto-generated hashtags for twitter or instagram feeds; but generally help with discoverability of relevant imagery.\"  </p>\n          <p> NASA also provide an image of the day. Click below to visit the gallery on nasa.com.</p>\n          </div>\n          <a href=\"https://www.nasa.gov/multimedia/imagegallery/iotd.html\"  target=\"_blank\" class=\"btn btn-primary btn-lg active float-right\" role=\"button\" aria-pressed=\"true\">Visit the Gallery</a>\n      </div>\n    </div>\n  )\n};\n\nexport default Infocard\n\n\n//https://www.nasa.gov/multimedia/imagegallery/iotd.html\n","import React, { Component } from 'react';\n//import Objects from './components/objects.js';\nimport Pictures from './components/pictures.js';\nimport Videos from './components/videos.js';\nimport Navbar from './components/navBar.js';\nimport Infocard from'./components/infoCard.js';\n\nclass App extends Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n        media: []\n    };\n  }\n\n  componentDidMount(){\n    let today = 'https://api.nasa.gov/planetary/apod?api_key=UrXJyJZWfOwzULw07rfPFuiur4cEsYCmC7WaSkTZ';\n    //let vidTst = 'https://api.nasa.gov/planetary/apod?date=2020-06-03&&api_key=UrXJyJZWfOwzULw07rfPFuiur4cEsYCmC7WaSkTZ';\n    //vidTst is for testing to see if this works with a video.\n    fetch(today)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ media: data })\n    })\n    .catch(console.log)\n  }\n\n  render () {\n    let conRend;\n    if(this.state.media.media_type == 'video')\n    {\n      conRend = <Videos media={this.state.media} />\n    }\n\n    if(this.state.media.media_type == 'image')\n    {\n      conRend = <Pictures media={this.state.media} />\n    }\n\n    return (  // Return divides the page into columns and there is some conditional rendering to handle video. // Will replace with a component\n      <div>\n      {<Navbar />}\n      <div class=\"row\">\n        <div class=\"col-sm mb-3\">\n          {conRend}\n        </div>\n        <div class=\"col-sm mb-3\">\n          {<Infocard />}\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}